{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _isPlainObject = require(\"is-plain-object\");\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _react = require(\"react\");\n\nvar _formatComplexDataStructure = require(\"./formatComplexDataStructure\");\n\nvar _formatComplexDataStructure2 = _interopRequireDefault(_formatComplexDataStructure);\n\nvar _formatTreeNode = require(\"./formatTreeNode\");\n\nvar _formatTreeNode2 = _interopRequireDefault(_formatTreeNode);\n\nvar _parseReactElement = require(\"./../parser/parseReactElement\");\n\nvar _parseReactElement2 = _interopRequireDefault(_parseReactElement);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar noRefCheck = function noRefCheck() {};\n\nvar escape = function escape(s) {\n  return s.replace(/\"/g, \"&quot;\");\n};\n\nvar defaultFunctionValue = function defaultFunctionValue(fn) {\n  return fn;\n};\n\nvar formatPropValue = function formatPropValue(propValue, inline, lvl, options) {\n  if (typeof propValue === \"number\") {\n    return \"{\" + String(propValue) + \"}\";\n  }\n\n  if (typeof propValue === \"string\") {\n    return '\"' + escape(propValue) + '\"';\n  } // > \"Symbols (new in ECMAScript 2015, not yet supported in Flow)\"\n  // @see: https://flow.org/en/docs/types/primitives/\n  // $FlowFixMe: Flow does not support Symbol\n\n\n  if ((typeof propValue === \"undefined\" ? \"undefined\" : _typeof(propValue)) === \"symbol\") {\n    var symbolDescription = propValue.valueOf().toString().replace(/Symbol\\((.*)\\)/, \"$1\");\n\n    if (!symbolDescription) {\n      return \"{Symbol()}\";\n    }\n\n    return \"{Symbol('\" + symbolDescription + \"')}\";\n  }\n\n  if (typeof propValue === \"function\") {\n    var _options$functionValu = options.functionValue,\n        functionValue = _options$functionValu === undefined ? defaultFunctionValue : _options$functionValu,\n        showFunctions = options.showFunctions;\n\n    if (!showFunctions && functionValue === defaultFunctionValue) {\n      return \"{\" + functionValue(noRefCheck) + \"}\";\n    }\n\n    return \"{\" + functionValue(propValue) + \"}\";\n  }\n\n  if ((0, _react.isValidElement)(propValue)) {\n    return \"{\" + (0, _formatTreeNode2.default)((0, _parseReactElement2.default)(propValue, options), true, lvl, options) + \"}\";\n  }\n\n  if (propValue instanceof Date) {\n    return '{new Date(\"' + propValue.toISOString() + '\")}';\n  }\n\n  if ((0, _isPlainObject2.default)(propValue) || Array.isArray(propValue)) {\n    return \"{\" + (0, _formatComplexDataStructure2.default)(propValue, inline, lvl, options) + \"}\";\n  }\n\n  return \"{\" + String(propValue) + \"}\";\n};\n\nexports.default = formatPropValue;","map":{"version":3,"sources":["../../src/formatter/formatPropValue.js"],"names":["s","String","propValue","escape","showFunctions","formatPropValue"],"mappings":";;;;;;AAEA,C;gDACA,GAAA,CAAA,WAAA,KAAA,M,+BACA,Q;;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;;;;;AAGe,IAAA,eAAiC,GAAVA,OAAgB,CAAvC,kBAAuC,CAAvC;;;;AAEc,IAAA,kBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;;;AAQ3B,SAAI,sBAAJ,CAAA,GAAA,EAAmC;AACjC,SAAA,GAAA,IAAA,GAAWC,CAAAA,UAAX,GAAA,GAAA,GAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAAA;AACD;;AAED,IAAA,UAAWC,GAAP,SAAJ,UAAI,GAA+B,CAAA,CAAnC;;AACE,IAAA,MAAA,GAAA,SAAWC,MAAX,CAAkBD,CAAlB,EAAA;AACD,SAAA,CAAA,CAAA,OAAA,CAAA,IAAA,EAAA,QAAA,CAAA;CADC;;AAIF,IAAA,oBAAA,GAAA,SAAA,oBAAA,CAAA,EAAA,EAAA;AACA,SAAA,EAAA;AACA,CAFA;;+CAQE,S,EACE,M,EACD,G,WAED;AACD,MAAA,OAAA,SAAA,KAAA,QAAA,EAAA;;AAED;;AAAqC,MAAA,OAAA,SAAA,KAAA,QAAA,EAAA;AAAA,WACWE,MADX,MAAA,CAAA,SAAA,CACWA,GADX,GAAA;GAHnC,CAME;AACD;;;;AAED,MACD,CAAA,OAAA,SAAA,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAA,SAAA,CAAA,M,QADC,EAGF;AACE,QAAA,iBAAW,GAAA,SAAX,CAMD,OANY,G,QAAA,GAQTF,OARS,CAQb,gBARa,EAQkB,IARlB,CAAX;;AAUD,QAAA,CAAA,iBAAA,EAAA;;AAED;;AAEC,WAAA,cAAA,iBAAA,GAAA,KAAA;;;AAtDH,MAAA,OAAA,SAAA,KAAA,UAAA,EAAA;;QA2DeG,aAAAA,G","sourcesContent":["/* @flow */\n\nimport isPlainObject from 'is-plain-object';\nimport { isValidElement } from 'react';\nimport formatComplexDataStructure from './formatComplexDataStructure';\nimport formatTreeNode from './formatTreeNode';\nimport type { Options } from './../options';\nimport parseReactElement from './../parser/parseReactElement';\n\nconst noRefCheck = () => {};\nconst escape = (s: string): string => s.replace(/\"/g, '&quot;');\n\nconst defaultFunctionValue = (fn: any): any => fn;\n\nconst formatPropValue = (\n  propValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  if (typeof propValue === 'number') {\n    return `{${String(propValue)}}`;\n  }\n\n  if (typeof propValue === 'string') {\n    return `\"${escape(propValue)}\"`;\n  }\n\n  // > \"Symbols (new in ECMAScript 2015, not yet supported in Flow)\"\n  // @see: https://flow.org/en/docs/types/primitives/\n  // $FlowFixMe: Flow does not support Symbol\n  if (typeof propValue === 'symbol') {\n    const symbolDescription = propValue\n      .valueOf()\n      .toString()\n      .replace(/Symbol\\((.*)\\)/, '$1');\n\n    if (!symbolDescription) {\n      return `{Symbol()}`;\n    }\n\n    return `{Symbol('${symbolDescription}')}`;\n  }\n\n  if (typeof propValue === 'function') {\n    const { functionValue = defaultFunctionValue, showFunctions } = options;\n    if (!showFunctions && functionValue === defaultFunctionValue) {\n      return `{${functionValue(noRefCheck)}}`;\n    }\n\n    return `{${functionValue(propValue)}}`;\n  }\n\n  if (isValidElement(propValue)) {\n    return `{${formatTreeNode(\n      parseReactElement(propValue, options),\n      true,\n      lvl,\n      options\n    )}}`;\n  }\n\n  if (propValue instanceof Date) {\n    return `{new Date(\"${propValue.toISOString()}\")}`;\n  }\n\n  if (isPlainObject(propValue) || Array.isArray(propValue)) {\n    return `{${formatComplexDataStructure(propValue, inline, lvl, options)}}`;\n  }\n\n  return `{${String(propValue)}}`;\n};\n\nexport default formatPropValue;\n"]},"metadata":{},"sourceType":"module"}