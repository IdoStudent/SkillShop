{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _spacer = require(\"./spacer\");\n\nvar _spacer2 = _interopRequireDefault(_spacer);\n\nvar _formatPropValue = require(\"./formatPropValue\");\n\nvar _formatPropValue2 = _interopRequireDefault(_formatPropValue);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nexports.default = function (name, hasValue, value, hasDefaultValue, defaultValue, inline, lvl, options) {\n  if (!hasValue && !hasDefaultValue) {\n    throw new Error('The prop \"' + name + '\" has no value and no default: could not be formatted');\n  }\n\n  var usedValue = hasValue ? value : defaultValue;\n  var useBooleanShorthandSyntax = options.useBooleanShorthandSyntax,\n      tabStop = options.tabStop;\n  var formattedPropValue = (0, _formatPropValue2.default)(usedValue, inline, lvl, options);\n  var attributeFormattedInline = \" \";\n  var attributeFormattedMultiline = \"\\n\" + (0, _spacer2.default)(lvl + 1, tabStop);\n  var isMultilineAttribute = formattedPropValue.includes(\"\\n\");\n\n  if (useBooleanShorthandSyntax && formattedPropValue === \"{false}\" && !hasDefaultValue) {\n    // If a boolean is false and not different from it's default, we do not render the attribute\n    attributeFormattedInline = \"\";\n    attributeFormattedMultiline = \"\";\n  } else if (useBooleanShorthandSyntax && formattedPropValue === \"{true}\") {\n    attributeFormattedInline += \"\" + name;\n    attributeFormattedMultiline += \"\" + name;\n  } else {\n    attributeFormattedInline += name + \"=\" + formattedPropValue;\n    attributeFormattedMultiline += name + \"=\" + formattedPropValue;\n  }\n\n  return {\n    attributeFormattedInline: attributeFormattedInline,\n    attributeFormattedMultiline: attributeFormattedMultiline,\n    isMultilineAttribute: isMultilineAttribute\n  };\n};","map":{"version":3,"sources":["../../src/formatter/formatProp.js"],"names":["formattedPropValue","attributeFormattedMultiline","useBooleanShorthandSyntax","attributeFormattedInline","isMultilineAttribute"],"mappings":";;;;;;AAEA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA;;;;AACA,IAAA,iBAAA,GAAA,sBAAA,CAAA,gBAAA,CAAA;;;;;;;;kBAGe,UAcb,IAda,EAeX,QAfW,EAkBZ,KAlBY,E,eAAA,EAoBb,YApBa,E,MAAA,EAaV,GAbU,EAaV,OAbU,E;;AAwBb,UAAMA,IAAN,KAAMA,C,eAEN,I,GACA,uDAHMA,CAAN;;;AAWE,MAAA,SAAA,GAAA,QAAA,GAAA,KAAA,GAAA,YAAA;AAEAC,MAAAA,yBAAAA,GAAAA,OAAAA,CAAAA,yBAAAA;AAAAA,MAPF,OAQO,GAAIC,OAAAA,CAAJ,OADLD;AAGAA,MAAAA,kBAAAA,GAAAA,CAAAA,GAAAA,iBAAAA,CAAAA,OAAAA,EAFK,SAELA,EAEAE,MAFAF,EAGAA,GAHAA,EAID,OAJCA,CAAAA;AAOAE,MAAAA,wBAAAA,GADK,GACLA;AACAF,MAAAA,2BAFK,GAGLG,OAAAA,CAAAA,GAAAA,QAAAA,CAAAA,OAAAA,EAAAA,GAAAA,GAAAA,CAAAA,EAAAA,OAAAA,CADAH;AAFF,MAAA,oBAAA,GAAA,kBAAA,CAAA,QAAA,CAAA,IAAA,CAAA","sourcesContent":["/* @flow */\n\nimport spacer from './spacer';\nimport formatPropValue from './formatPropValue';\nimport type { Options } from './../options';\n\nexport default (\n  name: string,\n  hasValue: boolean,\n  value: any,\n  hasDefaultValue: boolean,\n  defaultValue: any,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): {\n  attributeFormattedInline: string,\n  attributeFormattedMultiline: string,\n  isMultilineAttribute: boolean,\n} => {\n  if (!hasValue && !hasDefaultValue) {\n    throw new Error(\n      `The prop \"${name}\" has no value and no default: could not be formatted`\n    );\n  }\n\n  const usedValue = hasValue ? value : defaultValue;\n\n  const { useBooleanShorthandSyntax, tabStop } = options;\n\n  const formattedPropValue = formatPropValue(usedValue, inline, lvl, options);\n\n  let attributeFormattedInline = ' ';\n  let attributeFormattedMultiline = `\\n${spacer(lvl + 1, tabStop)}`;\n  const isMultilineAttribute = formattedPropValue.includes('\\n');\n\n  if (\n    useBooleanShorthandSyntax &&\n    formattedPropValue === '{false}' &&\n    !hasDefaultValue\n  ) {\n    // If a boolean is false and not different from it's default, we do not render the attribute\n    attributeFormattedInline = '';\n    attributeFormattedMultiline = '';\n  } else if (useBooleanShorthandSyntax && formattedPropValue === '{true}') {\n    attributeFormattedInline += `${name}`;\n    attributeFormattedMultiline += `${name}`;\n  } else {\n    attributeFormattedInline += `${name}=${formattedPropValue}`;\n    attributeFormattedMultiline += `${name}=${formattedPropValue}`;\n  }\n\n  return {\n    attributeFormattedInline,\n    attributeFormattedMultiline,\n    isMultilineAttribute,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}