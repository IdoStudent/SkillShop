{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _tree = require(\"./../tree\");\n\nexports.default = function (previousNodes, currentNode) {\n  var nodes = previousNodes.slice(0, previousNodes.length > 0 ? previousNodes.length - 1 : 0);\n  var previousNode = previousNodes[previousNodes.length - 1];\n\n  if (previousNode && (currentNode.type === \"string\" || currentNode.type === \"number\") && (previousNode.type === \"string\" || previousNode.type === \"number\")) {\n    nodes.push((0, _tree.createStringTreeNode)(String(previousNode.value) + String(currentNode.value)));\n  } else {\n    if (previousNode) {\n      nodes.push(previousNode);\n    }\n\n    nodes.push(currentNode);\n  }\n\n  return nodes;\n};","map":{"version":3,"sources":["../../src/formatter/mergeSiblingPlainStringChildrenReducer.js"],"names":["previousNodes","nodes","previousNode","currentNode"],"mappings":";;;;;;AAEA,OAAA,CAAA,OAAA,GAAA,UAAA,aAAA,EAAA,WAAA,EAAA;kCAGe,C,EAIb,aAAcA,CAAAA,MAAd,GAAcA,CAAd,GAAcA,aAEZA,CAAAA,MAFYA,GAEZA,CAFF,GAAA,C;;;AAWEC,MALF,YAUO,KACL,WAAIC,CAAJ,IAAA,KAAkB,QAAlB,IAAkB,WAAA,CAAA,IAAA,KAAA,QADb,CAVP,KAYID,YAAWC,CAAAA,IAAXD,KAAAA,QAAAA,IAAAA,YAAAA,CAAAA,IAAAA,KAAAA,QAZJ,CAKEA,EAQC;eAEDA,CAAAA,GAAAA,KAAWE,CAAXF,oBAAAA,EACD,MAAA,CAAA,YAAA,CAAA,KAAA,CAAA,GAAA,MAAA,CAAA,WAAA,CAAA,KAAA,CADCA,C;GAVAA,M;;;;;;;;;CAlBJ","sourcesContent":["/* @flow */\n\nimport { createStringTreeNode } from './../tree';\nimport type { TreeNode } from './../tree';\n\nexport default (\n  previousNodes: TreeNode[],\n  currentNode: TreeNode\n): TreeNode[] => {\n  const nodes = previousNodes.slice(\n    0,\n    previousNodes.length > 0 ? previousNodes.length - 1 : 0\n  );\n  const previousNode = previousNodes[previousNodes.length - 1];\n\n  if (\n    previousNode &&\n    (currentNode.type === 'string' || currentNode.type === 'number') &&\n    (previousNode.type === 'string' || previousNode.type === 'number')\n  ) {\n    nodes.push(\n      createStringTreeNode(\n        String(previousNode.value) + String(currentNode.value)\n      )\n    );\n  } else {\n    if (previousNode) {\n      nodes.push(previousNode);\n    }\n\n    nodes.push(currentNode);\n  }\n\n  return nodes;\n};\n"]},"metadata":{},"sourceType":"module"}