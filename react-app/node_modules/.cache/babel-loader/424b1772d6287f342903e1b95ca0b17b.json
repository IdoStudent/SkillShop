{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _formatReactElementNode = require(\"./formatReactElementNode\");\n\nvar _formatReactElementNode2 = _interopRequireDefault(_formatReactElementNode);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX = \"\";\nvar REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX = \"React.Fragment\";\n\nvar toReactElementTreeNode = function toReactElementTreeNode(displayName, key, childrens) {\n  var props = {};\n\n  if (key) {\n    props = {\n      key: key\n    };\n  }\n\n  return {\n    type: \"ReactElement\",\n    displayName: displayName,\n    props: props,\n    defaultProps: {},\n    childrens: childrens\n  };\n};\n\nvar isKeyedFragment = function isKeyedFragment(_ref) {\n  var key = _ref.key;\n  return Boolean(key);\n};\n\nvar hasNoChildren = function hasNoChildren(_ref2) {\n  var childrens = _ref2.childrens;\n  return childrens.length === 0;\n};\n\nexports.default = function (node, inline, lvl, options) {\n  var type = node.type,\n      key = node.key,\n      childrens = node.childrens;\n\n  if (type !== \"ReactFragment\") {\n    throw new Error('The \"formatReactFragmentNode\" function could only format node of type \"ReactFragment\". Given: ' + type);\n  }\n\n  var useFragmentShortSyntax = options.useFragmentShortSyntax;\n  var displayName = void 0;\n\n  if (useFragmentShortSyntax) {\n    if (hasNoChildren(node) || isKeyedFragment(node)) {\n      displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n    } else {\n      displayName = REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX;\n    }\n  } else {\n    displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n  }\n\n  return (0, _formatReactElementNode2.default)(toReactElementTreeNode(displayName, key, childrens), inline, lvl, options);\n};","map":{"version":3,"sources":["../../src/formatter/formatReactFragmentNode.js"],"names":["REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX","REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX","toReactElementTreeNode","props","type","defaultProps","childrens","isKeyedFragment","hasNoChildren","useFragmentShortSyntax","displayName"],"mappings":";;;;;;AAGA,IAAA,wBAAA,GAAA,sBAAA,CAAA,uBAAA,CAAA;;;;;;;;AAQA,IAAMA,oCAAAA,GAAN,EAAA;AACA,IAAMC,uCAAAA,GAAN,gBAAA;;AAEA,IAAMC,sBAAAA,GAAyB,SAAzBA,sBAAyB,CAK7B,WAL6B,EAM7B,GAN6B,EAO3BC,SAP2B,EAQ5B;;;AAED,MAAA,GAAA,EAAO;AACLC,IAAAA,KAAAA,GAAM;AAAA,MAAA,GAAA,EADD;AACC,KAANA;AADK;;AAILC,SAJK;AAKLC,IAAAA,IAAAA,EAAAA,cALK;AAAP,IAAA,WAAA,EAAA,WAAO;AAVT,IAAA,KAAA,EAAA,KAUS;oBAAA;AASHC,IAAAA,SAAAA,EAAAA;AATG,GAILF;AAKoB,CAnBxB;;AAoBA,IAAMG,eAAAA,GAAAA,SAAAA,eAAAA,CAAgB,IAAhBA,EAAgB;AAAA,MAAGF,GAAAA,GAAH,IAAA,CAAA,GAAA;AAAA,SACpBA,OAAAA,CADoB,GACpBA,CADoB;AAAtB,CAAA;;;kBAGe,KAAA,CAAA,S;AAKF,SAAA,SACHF,CADG,MAAA,KAAA,CAAA;AAAA,C;;;;MAGX,GAAIA,GAAAA,IAAAA,CAAJ,G;MACE,SAAM,GAAA,IAAA,CAAN,S;;;AAJS,UAWHK,IAXG,KAWHA,C,uGAAAA,CAXG;AAcX;;AAEIC,MAAAA,sBAAcT,GAAAA,OAAAA,CAAdS,sBAAAA;AAEAA,MAAAA,WAAAA,GAAcV,KAAdU,CAAAA;;AACD,MAAA,sBAAA,EAAA;AALH,QAAA,aAMO,CAAA,IAAA,CANP,IAMO,eAAA,CAAA,IAAA,CANP,EAMO;AACLA,MAAAA,WAAAA,GAAAA,uCAAAA;AACD,KARD,MAQC;;AAED;GALG,M","sourcesContent":["/* @flow */\n\nimport type { Key } from 'react';\nimport formatReactElementNode from './formatReactElementNode';\nimport type { Options } from './../options';\nimport type {\n  ReactElementTreeNode,\n  ReactFragmentTreeNode,\n  TreeNode,\n} from './../tree';\n\nconst REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX = '';\nconst REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX = 'React.Fragment';\n\nconst toReactElementTreeNode = (\n  displayName: string,\n  key: ?Key,\n  childrens: TreeNode[]\n): ReactElementTreeNode => {\n  let props = {};\n  if (key) {\n    props = { key };\n  }\n\n  return {\n    type: 'ReactElement',\n    displayName,\n    props,\n    defaultProps: {},\n    childrens,\n  };\n};\n\nconst isKeyedFragment = ({ key }: ReactFragmentTreeNode) => Boolean(key);\nconst hasNoChildren = ({ childrens }: ReactFragmentTreeNode) =>\n  childrens.length === 0;\n\nexport default (\n  node: ReactFragmentTreeNode,\n  inline: boolean,\n  lvl: number,\n  options: Options\n): string => {\n  const { type, key, childrens } = node;\n\n  if (type !== 'ReactFragment') {\n    throw new Error(\n      `The \"formatReactFragmentNode\" function could only format node of type \"ReactFragment\". Given: ${\n        type\n      }`\n    );\n  }\n\n  const { useFragmentShortSyntax } = options;\n\n  let displayName;\n  if (useFragmentShortSyntax) {\n    if (hasNoChildren(node) || isKeyedFragment(node)) {\n      displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n    } else {\n      displayName = REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX;\n    }\n  } else {\n    displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;\n  }\n\n  return formatReactElementNode(\n    toReactElementTreeNode(displayName, key, childrens),\n    inline,\n    lvl,\n    options\n  );\n};\n"]},"metadata":{},"sourceType":"module"}