{"ast":null,"code":"var _jsxFileName = \"E:\\\\Folders\\\\University Work\\\\PPE\\\\react_test\\\\my-app\\\\src\\\\pages\\\\LoginPage.react.js\";\nimport * as React from \"react\";\nimport { Formik } from \"formik\";\nimport { LoginPage as TablerLoginPage } from \"tabler-react\";\n\nfunction LoginPage(props) {\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validate: function validate(values) {\n      // same as above, but feel free to move this into a class method now.\n      var errors = {};\n\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = \"Invalid email address\";\n      }\n\n      return errors;\n    },\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting,\n          setErrors = _ref.setErrors;\n      alert(\"Done!\");\n    },\n    render: function render(_ref2) {\n      var values = _ref2.values,\n          errors = _ref2.errors,\n          touched = _ref2.touched,\n          handleChange = _ref2.handleChange,\n          handleBlur = _ref2.handleBlur,\n          handleSubmit = _ref2.handleSubmit,\n          isSubmitting = _ref2.isSubmitting;\n      return React.createElement(TablerLoginPage, {\n        onSubmit: handleSubmit,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        values: values,\n        errors: errors,\n        touched: touched,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  });\n}\n\nexport default LoginPage;","map":{"version":3,"sources":["E:\\Folders\\University Work\\PPE\\react_test\\my-app\\src\\pages\\LoginPage.react.js"],"names":["React","Formik","LoginPage","TablerLoginPage","props","email","password","values","errors","test","setSubmitting","setErrors","alert","touched","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":";AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAS,IAAIC,eAAtB,QAA6C,cAA7C;;AAIA,SAASD,SAAT,CAAmBE,KAAnB,EAA6C;AAC3C,SACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbC,MAAAA,KAAK,EAAE,EADM;AAEbC,MAAAA,QAAQ,EAAE;AAFG,KADjB;AAKE,IAAA,QAAQ,EAAE,kBAAAC,MAAM,EAAI;AAClB;AACA,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAI,CAACD,MAAM,CAACF,KAAZ,EAAmB;AACjBG,QAAAA,MAAM,CAACH,KAAP,GAAe,UAAf;AACD,OAFD,MAEO,IACL,CAAC,4CAA4CI,IAA5C,CAAiDF,MAAM,CAACF,KAAxD,CADI,EAEL;AACAG,QAAAA,MAAM,CAACH,KAAP,GAAe,uBAAf;AACD;;AACD,aAAOG,MAAP;AACD,KAhBH;AAiBE,IAAA,QAAQ,EAAE,kBACRD,MADQ,QAGL;AAAA,UADDG,aACC,QADDA,aACC;AAAA,UADcC,SACd,QADcA,SACd;AACHC,MAAAA,KAAK,CAAC,OAAD,CAAL;AACD,KAtBH;AAuBE,IAAA,MAAM,EAAE;AAAA,UACNL,MADM,SACNA,MADM;AAAA,UAENC,MAFM,SAENA,MAFM;AAAA,UAGNK,OAHM,SAGNA,OAHM;AAAA,UAINC,YAJM,SAINA,YAJM;AAAA,UAKNC,UALM,SAKNA,UALM;AAAA,UAMNC,YANM,SAMNA,YANM;AAAA,UAONC,YAPM,SAONA,YAPM;AAAA,aASN,oBAAC,eAAD;AACE,QAAA,QAAQ,EAAED,YADZ;AAEE,QAAA,QAAQ,EAAEF,YAFZ;AAGE,QAAA,MAAM,EAAEC,UAHV;AAIE,QAAA,MAAM,EAAER,MAJV;AAKE,QAAA,MAAM,EAAEC,MALV;AAME,QAAA,OAAO,EAAEK,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATM;AAAA,KAvBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA4CD;;AAED,eAAeX,SAAf","sourcesContent":["// @flow\r\n\r\nimport * as React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { LoginPage as TablerLoginPage } from \"tabler-react\";\r\n\r\ntype Props = {||};\r\n\r\nfunction LoginPage(props: Props): React.Node {\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n      validate={values => {\r\n        // same as above, but feel free to move this into a class method now.\r\n        let errors = {};\r\n        if (!values.email) {\r\n          errors.email = \"Required\";\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n        ) {\r\n          errors.email = \"Invalid email address\";\r\n        }\r\n        return errors;\r\n      }}\r\n      onSubmit={(\r\n        values,\r\n        { setSubmitting, setErrors /* setValues and other goodies */ }\r\n      ) => {\r\n        alert(\"Done!\");\r\n      }}\r\n      render={({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n      }) => (\r\n        <TablerLoginPage\r\n          onSubmit={handleSubmit}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n          values={values}\r\n          errors={errors}\r\n          touched={touched}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n"]},"metadata":{},"sourceType":"module"}