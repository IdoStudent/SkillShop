{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _formatTree = require(\"./formatter/formatTree\");\n\nvar _formatTree2 = _interopRequireDefault(_formatTree);\n\nvar _parseReactElement = require(\"./parser/parseReactElement\");\n\nvar _parseReactElement2 = _interopRequireDefault(_parseReactElement);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar reactElementToJsxString = function reactElementToJsxString(element) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$filterProps = _ref.filterProps,\n      filterProps = _ref$filterProps === undefined ? [] : _ref$filterProps,\n      _ref$showDefaultProps = _ref.showDefaultProps,\n      showDefaultProps = _ref$showDefaultProps === undefined ? true : _ref$showDefaultProps,\n      _ref$showFunctions = _ref.showFunctions,\n      showFunctions = _ref$showFunctions === undefined ? false : _ref$showFunctions,\n      functionValue = _ref.functionValue,\n      _ref$tabStop = _ref.tabStop,\n      tabStop = _ref$tabStop === undefined ? 2 : _ref$tabStop,\n      _ref$useBooleanShorth = _ref.useBooleanShorthandSyntax,\n      useBooleanShorthandSyntax = _ref$useBooleanShorth === undefined ? true : _ref$useBooleanShorth,\n      _ref$useFragmentShort = _ref.useFragmentShortSyntax,\n      useFragmentShortSyntax = _ref$useFragmentShort === undefined ? true : _ref$useFragmentShort,\n      _ref$sortProps = _ref.sortProps,\n      sortProps = _ref$sortProps === undefined ? true : _ref$sortProps,\n      maxInlineAttributesLineLength = _ref.maxInlineAttributesLineLength,\n      displayName = _ref.displayName;\n\n  if (!element) {\n    throw new Error(\"react-element-to-jsx-string: Expected a ReactElement\");\n  }\n\n  var options = {\n    filterProps: filterProps,\n    showDefaultProps: showDefaultProps,\n    showFunctions: showFunctions,\n    functionValue: functionValue,\n    tabStop: tabStop,\n    useBooleanShorthandSyntax: useBooleanShorthandSyntax,\n    useFragmentShortSyntax: useFragmentShortSyntax,\n    sortProps: sortProps,\n    maxInlineAttributesLineLength: maxInlineAttributesLineLength,\n    displayName: displayName\n  };\n  return (0, _formatTree2.default)((0, _parseReactElement2.default)(element, options), options);\n};\n\nexports.default = reactElementToJsxString;","map":{"version":3,"sources":["../src/index.js"],"names":["reactElementToJsxString","filterProps","showDefaultProps","showFunctions","functionValue","tabStop","useBooleanShorthandSyntax","useFragmentShortSyntax","sortProps","maxInlineAttributesLineLength","displayName"],"mappings":";;;;;;AAEA,IAAA,YAAA,GAAA,sBAAA,CAAA,WAAA,CAAA;;;;AACA,IAAA,mBAAA,GAAA,sBAAA,CAAA,kBAAA,CAAA;;;;;;;;AAIA,IAAMA,uBAAAA,GAA0B,SAA1BA,uBAA0B,CAAA,OAAA,EAc3B;AAAA,MAAA,IADU,GACV,SAAA,CAAA,MAAA,GAAA,CAAA,IAXDC,SAAAA,CAAAA,CAAAA,CAAAA,KAWC,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,EAAA;AAAA,MAXDA,gBAWC,GAAA,IAAA,CAXa,WAWb;AAAA,MAAA,WAAA,GAAA,gBAVDC,KAAAA,SAUC,GAAA,EAAA,GAAA,gBAAA;AAAA,MAVDA,qBAUC,GAAA,IAAA,CAVkB,gBAUlB;AAAA,MAAA,gBATDC,GAAAA,qBASC,KAAA,SATDA,GASC,IATDA,GAAgB,qBASf;AAAA,MARDC,kBAQC,GARDA,IAAAA,CAAAA,aAQC;AAAA,MAAA,aAPDC,GAAAA,kBAOC,KAAA,SAPDA,GAAU,KAAVA,GAOC,kBAAA;AAAA,MAAA,aAAA,GAAA,IAAA,CANDC,aAMC;AAAA,MANDA,YAAAA,GAAAA,IAAAA,CAAAA,OAMC;AAAA,MAAA,OAAA,GAAA,YAAA,KALDC,SAKC,GALDA,CAKC,GALDA,YAKC;AAAA,MALDA,qBAAAA,GAKC,IAAA,CALwB,yBAKxB;AAAA,MAJDC,yBAAAA,GAAAA,qBAIC,KAAA,SAJDA,GAAY,IAAZA,GAAY,qBAIX;AAAA,MAHDC,qBAAAA,GAAAA,IAAAA,CAAAA,sBAGC;AAAA,MAFDC,sBAAAA,G,kEAEC;AAAA,MACH,cAAc,GAAA,IAAA,CAAA,SADX;AAAA,MAED,SAAM,GAAA,cAAU,KAAA,SAAV,GAAU,IAAV,GAAN,cAFC;AAAA,MAGF,6BAAA,GAAA,IAAA,CAAA,6BAHE;AAAA,M,8BAAA;;AAMDT,MAAAA,CAAAA,OAAAA,EADc;AAEdC,UAAAA,IAAAA,KAAAA,CAFc,sDAEdA,CAAAA;AAFc;;AAKdG,MAAAA,OAAAA,GALc;AAMdC,IAAAA,WAAAA,EANc,WAAA;AAOdC,IAAAA,gBAAAA,EAPc,gBAAA;AAQdC,IAAAA,aAAAA,EARc,aAAA;AASdC,IAAAA,aAAAA,EATc,aAAA;AAUdC,IAAAA,OAAAA,EAAAA,OAVc;AAAhB,IAAA,yBAAA,EAAA,yBAAgB;kDAAA;AAahB,IAAA,SAAO,EAAP,SAbgB;AAnBlB,IAAA,6BAAA,EAAA,6BAmBkB;;AAAA,GAKdL;;CAxBJ","sourcesContent":["/* @flow */\n\nimport formatTree from './formatter/formatTree';\nimport parseReactElement from './parser/parseReactElement';\nimport type { Element as ReactElement } from 'react';\nimport type { Options } from './options';\n\nconst reactElementToJsxString = (\n  element: ReactElement<any>,\n  {\n    filterProps = [],\n    showDefaultProps = true,\n    showFunctions = false,\n    functionValue,\n    tabStop = 2,\n    useBooleanShorthandSyntax = true,\n    useFragmentShortSyntax = true,\n    sortProps = true,\n    maxInlineAttributesLineLength,\n    displayName,\n  }: Options = {}\n) => {\n  if (!element) {\n    throw new Error('react-element-to-jsx-string: Expected a ReactElement');\n  }\n\n  const options = {\n    filterProps,\n    showDefaultProps,\n    showFunctions,\n    functionValue,\n    tabStop,\n    useBooleanShorthandSyntax,\n    useFragmentShortSyntax,\n    sortProps,\n    maxInlineAttributesLineLength,\n    displayName,\n  };\n\n  return formatTree(parseReactElement(element, options), options);\n};\n\nexport default reactElementToJsxString;\n"]},"metadata":{},"sourceType":"module"}